/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@font-face {
  font-family: 'Ubuntu Condensed';
  font-style: normal;
  font-weight: 400;
  src: url(../fonts/Ubuntu-Condensed.woff2) format("woff2"); }

@font-face {
  font-family: 'Ubuntu Medium';
  font-style: normal;
  font-weight: 500;
  src: url(../fonts/Ubuntu.woff2) format("woff2"); }

@font-face {
  font-family: 'Aileron-Regular';
  src: url(../fonts/Aileron-Regular.otf) format("otf"); }

/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@font-face {
  font-family: 'Ubuntu Condensed';
  font-style: normal;
  font-weight: 400;
  src: url(../fonts/Ubuntu-Condensed.woff2) format("woff2"); }

@font-face {
  font-family: 'Ubuntu Medium';
  font-style: normal;
  font-weight: 500;
  src: url(../fonts/Ubuntu.woff2) format("woff2"); }

@font-face {
  font-family: 'Aileron-Regular';
  src: url(../fonts/Aileron-Regular.otf) format("otf"); }

@font-face {
  font-family: 'Ubuntu Condensed';
  font-style: normal;
  font-weight: 400;
  src: url(../fonts/Ubuntu-Condensed.woff2) format("woff2"); }

@font-face {
  font-family: 'Ubuntu Medium';
  font-style: normal;
  font-weight: 500;
  src: url(../fonts/Ubuntu.woff2) format("woff2"); }

@font-face {
  font-family: 'Aileron-Regular';
  src: url(../fonts/Aileron-Regular.otf) format("otf"); }

.wrapper {
  width: 1160px;
  margin: 0 auto; }
  .wrapper header {
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-pack: justify;
    -webkit-justify-content: space-between;
        -ms-flex-pack: justify;
            justify-content: space-between;
    margin: 40px 0 20px 0; }
    .wrapper header .icon .facebook::after {
      background: url(../img/image1.jpg) 0 0 no-repeat;
      content: "";
      width: 20px;
      height: 20px;
      overflow: hidden;
      vertical-align: middle;
      display: inline-block; }
    .wrapper header .icon .facebook:hover::after {
      background: url(../img/image1.jpg) 0 -25px no-repeat; }
    .wrapper header .icon .twitter::after {
      background: url(../img/image1.jpg) -25px 0 no-repeat;
      content: "";
      width: 20px;
      height: 20px;
      overflow: hidden;
      vertical-align: middle;
      display: inline-block; }
    .wrapper header .icon .twitter:hover::after {
      background: url(../img/image1.jpg) -25px -25px no-repeat; }
    .wrapper header .icon .rss::after {
      background: url(../img/image1.jpg) -50px 0 no-repeat;
      content: "";
      width: 20px;
      height: 20px;
      overflow: hidden;
      vertical-align: middle;
      display: inline-block; }
    .wrapper header .icon .rss:hover::after {
      background: url(../img/image1.jpg) -50px -25px no-repeat; }
    .wrapper header .icon .linkedin::after {
      background: url(../img/image1.jpg) -75px 0 no-repeat;
      content: "";
      width: 20px;
      height: 20px;
      overflow: hidden;
      vertical-align: middle;
      display: inline-block; }
    .wrapper header .icon .linkedin:hover::after {
      background: url(../img/image1.jpg) -75px -25px no-repeat; }
    .wrapper header .icon .skype::after {
      background: url(../img/image1.jpg) -100px 0 no-repeat;
      content: "";
      width: 20px;
      height: 20px;
      overflow: hidden;
      vertical-align: middle;
      display: inline-block; }
    .wrapper header .icon .skype:hover::after {
      background: url(../img/image1.jpg) -100px -25px no-repeat; }
  .wrapper nav {
    font-family: 'Ubuntu Condensed';
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-pack: justify;
    -webkit-justify-content: space-between;
        -ms-flex-pack: justify;
            justify-content: space-between;
    background: #2a2d32; }
    .wrapper nav ul {
      display: -webkit-box;
      display: -webkit-flex;
      display: -ms-flexbox;
      display: flex;
      padding: 0;
      margin: 0; }
      .wrapper nav ul .blue {
        background: #248cec; }
      .wrapper nav ul li {
        list-style: none;
        padding: 17px 25px;
        border-right: 1px solid #000; }
        .wrapper nav ul li a {
          font-size: 15px;
          color: #fff;
          text-decoration: none; }
        .wrapper nav ul li a:hover {
          color: #f4b60d; }
    .wrapper nav input {
      background: url("../img/search.png") 95% 50% no-repeat, #35383c;
      outline: none;
      border: 1px solid #272626;
      height: 35px;
      margin: 7px;
      width: 205px;
      padding: 0 0 0 10px; }
    .wrapper nav input::-webkit-input-placeholder {
      padding-left: 0;
      color: #5d5f61; }
  .wrapper .fotorama {
    margin-top: 30px; }
  .wrapper .text-container {
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-pack: justify;
    -webkit-justify-content: space-between;
        -ms-flex-pack: justify;
            justify-content: space-between;
    font-size: 13px;
    padding: 60px 0; }
    .wrapper .text-container .num p {
      color: #e9e9ea;
      font-size: 90px;
      margin: 0; }
    .wrapper .text-container .power {
      width: 23%; }
      .wrapper .text-container .power h3 {
        font-size: 20px; }
      .wrapper .text-container .power a {
        text-decoration: none;
        color: #000; }
      .wrapper .text-container .power a:hover {
        color: #248cec; }
      .wrapper .text-container .power a::after {
        background: url("../img/sprites/sprite.png") -10px 0 no-repeat;
        content: "";
        width: 10px;
        height: 11px;
        overflow: hidden;
        vertical-align: middle;
        margin-left: 10px;
        display: inline-block; }
      .wrapper .text-container .power a:hover::after {
        background-position: 0 0; }
      .wrapper .text-container .power img {
        margin-top: 10px;
        display: block; }
    .wrapper .text-container .techno {
      width: 23%; }
      .wrapper .text-container .techno h3 {
        font-size: 20px; }
      .wrapper .text-container .techno a {
        text-decoration: none;
        color: #000; }
      .wrapper .text-container .techno a:hover {
        color: #248cec; }
      .wrapper .text-container .techno a::after {
        background: url("../img/sprites/sprite.png") -10px 0 no-repeat;
        content: "";
        width: 10px;
        height: 11px;
        overflow: hidden;
        vertical-align: middle;
        margin-left: 10px;
        display: inline-block; }
      .wrapper .text-container .techno a:hover::after {
        background-position: 0 0; }
      .wrapper .text-container .techno img {
        margin-top: 10px;
        display: block; }
    .wrapper .text-container .support {
      width: 23%; }
      .wrapper .text-container .support h3 {
        font-size: 20px; }
      .wrapper .text-container .support a {
        text-decoration: none;
        color: #000; }
      .wrapper .text-container .support a:hover {
        color: #248cec; }
      .wrapper .text-container .support a::after {
        background: url("../img/sprites/sprite.png") -10px 0 no-repeat;
        content: "";
        width: 10px;
        height: 11px;
        overflow: hidden;
        vertical-align: middle;
        margin-left: 10px;
        display: inline-block; }
      .wrapper .text-container .support a:hover::after {
        background-position: 0 0; }
      .wrapper .text-container .support img {
        margin-top: 10px;
        display: block; }

/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@font-face {
  font-family: 'Ubuntu Condensed';
  font-style: normal;
  font-weight: 400;
  src: url(../fonts/Ubuntu-Condensed.woff2) format("woff2"); }

@font-face {
  font-family: 'Ubuntu Medium';
  font-style: normal;
  font-weight: 500;
  src: url(../fonts/Ubuntu.woff2) format("woff2"); }

@font-face {
  font-family: 'Aileron-Regular';
  src: url(../fonts/Aileron-Regular.otf) format("otf"); }

@font-face {
  font-family: 'Ubuntu Condensed';
  font-style: normal;
  font-weight: 400;
  src: url(../fonts/Ubuntu-Condensed.woff2) format("woff2"); }

@font-face {
  font-family: 'Ubuntu Medium';
  font-style: normal;
  font-weight: 500;
  src: url(../fonts/Ubuntu.woff2) format("woff2"); }

@font-face {
  font-family: 'Aileron-Regular';
  src: url(../fonts/Aileron-Regular.otf) format("otf"); }

.container {
  background: #2a2d32;
  padding: 50px 0; }
  .container .our_services {
    width: 1160px;
    margin: 0 auto; }
    .container .our_services h3 {
      color: #fff;
      padding-bottom: 30px; }
    .container .our_services .all_services {
      display: -webkit-box;
      display: -webkit-flex;
      display: -ms-flexbox;
      display: flex; }
      .container .our_services .all_services .schedule_srvices .schedule_pic {
        background: url(../img/Untitled-10.png) no-repeat;
        content: "";
        width: 260px;
        height: 260px;
        margin: 0 40px 40px 0;
        vertical-align: middle;
        display: inline-block; }
      .container .our_services .all_services .schedule_srvices .schedule_pic:hover::before {
        background: url(../img/1.png) no-repeat;
        background-position: center;
        background-color: rgba(7, 91, 169, 0.7);
        content: "";
        width: 260px;
        height: 260px;
        margin: 0 40px 40px 0;
        vertical-align: middle;
        display: inline-block; }
      .container .our_services .all_services .schedule_srvices h4 {
        color: #fff; }
      .container .our_services .all_services .preventiv_maintence .preventiv_pic {
        background: url(../img/rdJD.png) no-repeat;
        content: "";
        width: 260px;
        height: 260px;
        margin: 0 40px 40px 0;
        vertical-align: middle;
        display: inline-block; }
      .container .our_services .all_services .preventiv_maintence .preventiv_pic:hover::before {
        background: url(../img/1.png) no-repeat;
        background-position: center;
        background-color: rgba(7, 91, 169, 0.7);
        content: "";
        width: 260px;
        height: 260px;
        margin: 0 40px 40px 0;
        vertical-align: middle;
        display: inline-block; }
      .container .our_services .all_services .preventiv_maintence h4 {
        color: #fff; }
      .container .our_services .all_services .wheel_srvices .wheel_pic {
        background: url(../img/Rectangle.png) no-repeat;
        content: "";
        width: 260px;
        height: 260px;
        margin: 0 40px 40px 0;
        vertical-align: middle;
        display: inline-block; }
      .container .our_services .all_services .wheel_srvices .wheel_pic:hover::before {
        background: url(../img/1.png) no-repeat;
        background-position: center;
        background-color: rgba(7, 91, 169, 0.7);
        content: "";
        width: 260px;
        height: 260px;
        margin: 0 40px 40px 0;
        vertical-align: middle;
        display: inline-block; }
      .container .our_services .all_services .wheel_srvices h4 {
        color: #fff; }
      .container .our_services .all_services .repair_services .repair_pic {
        background: url(../img/Selective.png) no-repeat;
        content: "";
        width: 260px;
        height: 260px;
        margin: 0 40px 40px 0;
        vertical-align: middle;
        display: inline-block; }
      .container .our_services .all_services .repair_services .repair_pic:hover::before {
        background: url(../img/1.png) no-repeat;
        background-position: center;
        background-color: rgba(7, 91, 169, 0.7);
        content: "";
        width: 260px;
        height: 260px;
        margin: 0 40px 40px 0;
        vertical-align: middle;
        display: inline-block; }
      .container .our_services .all_services .repair_services h4 {
        color: #fff; }
      .container .our_services .all_services a:hover + h4 {
        color: #f4b60d; }

/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@font-face {
  font-family: 'Ubuntu Condensed';
  font-style: normal;
  font-weight: 400;
  src: url(../fonts/Ubuntu-Condensed.woff2) format("woff2"); }

@font-face {
  font-family: 'Ubuntu Medium';
  font-style: normal;
  font-weight: 500;
  src: url(../fonts/Ubuntu.woff2) format("woff2"); }

@font-face {
  font-family: 'Aileron-Regular';
  src: url(../fonts/Aileron-Regular.otf) format("otf"); }

@font-face {
  font-family: 'Ubuntu Condensed';
  font-style: normal;
  font-weight: 400;
  src: url(../fonts/Ubuntu-Condensed.woff2) format("woff2"); }

@font-face {
  font-family: 'Ubuntu Medium';
  font-style: normal;
  font-weight: 500;
  src: url(../fonts/Ubuntu.woff2) format("woff2"); }

@font-face {
  font-family: 'Aileron-Regular';
  src: url(../fonts/Aileron-Regular.otf) format("otf"); }

.news {
  background: #f7f7f7; }
  .news .all_news {
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    padding: 40px 0 100px 0;
    width: 1160px;
    margin: 0 auto; }
    .news .all_news .latest_news {
      width: 65%; }
      .news .all_news .latest_news .head_box {
        display: -webkit-box;
        display: -webkit-flex;
        display: -ms-flexbox;
        display: flex; }
        .news .all_news .latest_news .head_box::before {
          content: url("../img/jan.png");
          margin-right: 20px;
          margin-top: 15px; }
        .news .all_news .latest_news .head_box .advanced_machinery {
          display: -webkit-box;
          display: -webkit-flex;
          display: -ms-flexbox;
          display: flex;
          -webkit-box-orient: vertical;
          -webkit-box-direction: normal;
          -webkit-flex-direction: column;
              -ms-flex-direction: column;
                  flex-direction: column;
          color: #8a8a8a;
          width: 47%; }
          .news .all_news .latest_news .head_box .advanced_machinery h4 {
            color: #000;
            margin-bottom: 0; }
          .news .all_news .latest_news .head_box .advanced_machinery h4:hover {
            color: #248cec; }
          .news .all_news .latest_news .head_box .advanced_machinery .under_text {
            font-family: 'Aileron-Regular';
            display: -webkit-box;
            display: -webkit-flex;
            display: -ms-flexbox;
            display: flex; }
            .news .all_news .latest_news .head_box .advanced_machinery .under_text span {
              display: block;
              margin-right: 5px; }
            .news .all_news .latest_news .head_box .advanced_machinery .under_text p {
              color: #0187f4;
              margin: 0 10px 0 0; }
          .news .all_news .latest_news .head_box .advanced_machinery p {
            font-family: 'Aileron-Regular'; }
      .news .all_news .latest_news .foot_box {
        display: -webkit-box;
        display: -webkit-flex;
        display: -ms-flexbox;
        display: flex; }
        .news .all_news .latest_news .foot_box::before {
          content: url("../img/jan21.png");
          margin-right: 20px;
          margin-top: 15px; }
        .news .all_news .latest_news .foot_box .powerful {
          display: -webkit-box;
          display: -webkit-flex;
          display: -ms-flexbox;
          display: flex;
          -webkit-box-orient: vertical;
          -webkit-box-direction: normal;
          -webkit-flex-direction: column;
              -ms-flex-direction: column;
                  flex-direction: column;
          color: #8a8a8a;
          width: 47%; }
          .news .all_news .latest_news .foot_box .powerful h4 {
            color: #000;
            margin-bottom: 0; }
          .news .all_news .latest_news .foot_box .powerful h4:hover {
            color: #248cec; }
          .news .all_news .latest_news .foot_box .powerful .under_text {
            font-family: "Aileron-Regular";
            display: -webkit-box;
            display: -webkit-flex;
            display: -ms-flexbox;
            display: flex; }
            .news .all_news .latest_news .foot_box .powerful .under_text span {
              display: block;
              margin-right: 5px; }
            .news .all_news .latest_news .foot_box .powerful .under_text p {
              color: #0187f4;
              margin: 0 10px 0 0; }
        .news .all_news .latest_news .foot_box p {
          font-family: "Aileron-Regular"; }
    .news .all_news .accordion {
      width: 600px; }
      .news .all_news .accordion .banner_accord .active {
        background: #f4b60d; }
        .news .all_news .accordion .banner_accord .active::before {
          content: url("../img/linkedin.png");
          display: -webkit-box;
          display: -webkit-flex;
          display: -ms-flexbox;
          display: flex;
          -webkit-box-pack: center;
          -webkit-justify-content: center;
              -ms-flex-pack: center;
                  justify-content: center;
          -webkit-box-align: center;
          -webkit-align-items: center;
              -ms-flex-align: center;
                  align-items: center;
          border-right: 1px solid #000;
          width: 30px; }
      .news .all_news .accordion .banner_accord h5 {
        display: -webkit-box;
        display: -webkit-flex;
        display: -ms-flexbox;
        display: flex;
        height: 30px;
        border: 1px solid #000; }
        .news .all_news .accordion .banner_accord h5::before {
          content: url("../img/plus.png");
          display: -webkit-box;
          display: -webkit-flex;
          display: -ms-flexbox;
          display: flex;
          -webkit-box-pack: center;
          -webkit-justify-content: center;
              -ms-flex-pack: center;
                  justify-content: center;
          -webkit-box-align: center;
          -webkit-align-items: center;
              -ms-flex-align: center;
                  align-items: center;
          border-right: 1px solid #000;
          width: 30px; }

/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@font-face {
  font-family: 'Ubuntu Condensed';
  font-style: normal;
  font-weight: 400;
  src: url(../fonts/Ubuntu-Condensed.woff2) format("woff2"); }

@font-face {
  font-family: 'Ubuntu Medium';
  font-style: normal;
  font-weight: 500;
  src: url(../fonts/Ubuntu.woff2) format("woff2"); }

@font-face {
  font-family: 'Aileron-Regular';
  src: url(../fonts/Aileron-Regular.otf) format("otf"); }

@font-face {
  font-family: 'Ubuntu Condensed';
  font-style: normal;
  font-weight: 400;
  src: url(../fonts/Ubuntu-Condensed.woff2) format("woff2"); }

@font-face {
  font-family: 'Ubuntu Medium';
  font-style: normal;
  font-weight: 500;
  src: url(../fonts/Ubuntu.woff2) format("woff2"); }

@font-face {
  font-family: 'Aileron-Regular';
  src: url(../fonts/Aileron-Regular.otf) format("otf"); }

.brend-icons {
  width: 1160px;
  margin: 0 auto; }

/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@font-face {
  font-family: 'Ubuntu Condensed';
  font-style: normal;
  font-weight: 400;
  src: url(../fonts/Ubuntu-Condensed.woff2) format("woff2"); }

@font-face {
  font-family: 'Ubuntu Medium';
  font-style: normal;
  font-weight: 500;
  src: url(../fonts/Ubuntu.woff2) format("woff2"); }

@font-face {
  font-family: 'Aileron-Regular';
  src: url(../fonts/Aileron-Regular.otf) format("otf"); }

@font-face {
  font-family: 'Ubuntu Condensed';
  font-style: normal;
  font-weight: 400;
  src: url(../fonts/Ubuntu-Condensed.woff2) format("woff2"); }

@font-face {
  font-family: 'Ubuntu Medium';
  font-style: normal;
  font-weight: 500;
  src: url(../fonts/Ubuntu.woff2) format("woff2"); }

@font-face {
  font-family: 'Aileron-Regular';
  src: url(../fonts/Aileron-Regular.otf) format("otf"); }

.foot_link {
  font-family: "Aileron-Regular";
  background: #2a2d32; }
  .foot_link .link_box {
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-pack: justify;
    -webkit-justify-content: space-between;
        -ms-flex-pack: justify;
            justify-content: space-between;
    padding: 40px 0;
    width: 1160px;
    margin: 0 auto; }
    .foot_link .link_box div {
      width: 20%; }
      .foot_link .link_box div h4 {
        color: #fff;
        margin: 0; }
      .foot_link .link_box div ul {
        padding: 0; }
        .foot_link .link_box div ul li {
          list-style: none;
          border-bottom: 1px solid #5d5f61; }
          .foot_link .link_box div ul li a {
            display: block;
            text-decoration: none;
            color: #5d5f61;
            padding: 10px 0; }
          .foot_link .link_box div ul li a:hover {
            color: #248cec; }
      .foot_link .link_box div h4 {
        font-family: "Ubuntu Medium"; }
      .foot_link .link_box div .last_link {
        border: none; }

/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@font-face {
  font-family: 'Ubuntu Condensed';
  font-style: normal;
  font-weight: 400;
  src: url(../fonts/Ubuntu-Condensed.woff2) format("woff2"); }

@font-face {
  font-family: 'Ubuntu Medium';
  font-style: normal;
  font-weight: 500;
  src: url(../fonts/Ubuntu.woff2) format("woff2"); }

@font-face {
  font-family: 'Aileron-Regular';
  src: url(../fonts/Aileron-Regular.otf) format("otf"); }

@font-face {
  font-family: 'Ubuntu Condensed';
  font-style: normal;
  font-weight: 400;
  src: url(../fonts/Ubuntu-Condensed.woff2) format("woff2"); }

@font-face {
  font-family: 'Ubuntu Medium';
  font-style: normal;
  font-weight: 500;
  src: url(../fonts/Ubuntu.woff2) format("woff2"); }

@font-face {
  font-family: 'Aileron-Regular';
  src: url(../fonts/Aileron-Regular.otf) format("otf"); }

footer {
  font-family: "Aileron-Regular";
  background: #3c3e40;
  color: #5d5f61; }
  footer .footer_container {
    width: 1160px;
    margin: 0 auto;
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-pack: justify;
    -webkit-justify-content: space-between;
        -ms-flex-pack: justify;
            justify-content: space-between; }
    footer .footer_container .contact_inform {
      display: -webkit-box;
      display: -webkit-flex;
      display: -ms-flexbox;
      display: flex; }
      footer .footer_container .contact_inform p {
        display: block;
        margin-right: 20px; }
      footer .footer_container .contact_inform .locate:before {
        content: url("../img/location.png");
        margin-right: 10px; }
      footer .footer_container .contact_inform .phone:before {
        content: url("../img/iphone.png");
        margin-right: 10px; }
      footer .footer_container .contact_inform .mail:before {
        content: url("../img/email.png");
        margin-right: 10px; }

/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@font-face {
  font-family: 'Ubuntu Condensed';
  font-style: normal;
  font-weight: 400;
  src: url(../fonts/Ubuntu-Condensed.woff2) format("woff2"); }

@font-face {
  font-family: 'Ubuntu Medium';
  font-style: normal;
  font-weight: 500;
  src: url(../fonts/Ubuntu.woff2) format("woff2"); }

@font-face {
  font-family: 'Aileron-Regular';
  src: url(../fonts/Aileron-Regular.otf) format("otf"); }

@font-face {
  font-family: 'Ubuntu Condensed';
  font-style: normal;
  font-weight: 400;
  src: url(../fonts/Ubuntu-Condensed.woff2) format("woff2"); }

@font-face {
  font-family: 'Ubuntu Medium';
  font-style: normal;
  font-weight: 500;
  src: url(../fonts/Ubuntu.woff2) format("woff2"); }

@font-face {
  font-family: 'Aileron-Regular';
  src: url(../fonts/Aileron-Regular.otf) format("otf"); }

body {
  font-family: "Ubuntu Medium";
  font-size: 15px; }

@font-face {
  font-family: 'Ubuntu Condensed';
  font-style: normal;
  font-weight: 400;
  src: url(../fonts/Ubuntu-Condensed.woff2) format("woff2"); }

@font-face {
  font-family: 'Ubuntu Medium';
  font-style: normal;
  font-weight: 500;
  src: url(../fonts/Ubuntu.woff2) format("woff2"); }

@font-face {
  font-family: 'Aileron-Regular';
  src: url(../fonts/Aileron-Regular.otf) format("otf"); }
